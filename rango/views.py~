from django.contrib.auth import authenticate,login,logout
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse,HttpResponseRedirect
from django.template import RequestContext
from django.shortcuts import render,render_to_response,redirect
from django.conf import settings
from rango.models import Category,Page
from rango.forms import CategoryForm,PageForm,UserForm,UserProfileForm
from rango.templatetags import rango_extras
from datetime import datetime
from rango.bing_search import run_query
import os
		
def count_work(request):
	visits = int(request.session.get('visits',0))
	if request.session.has_key('last_visit'):
		last_visit = request.session['last_visit']
		last_visit_time = datetime.strptime(last_visit[:-7],"%Y-%m-%d %H:%M:%S")
		if (datetime.now()-last_visit_time).seconds > 1:
			request.session['last_visit'] = str(datetime.now())
			request.session['visits'] = str(visits+1)
	else:
		request.session['last_visit'] = str(datetime.now())
		request.session['visits'] = '1'
	return visits+1

def get_category_list():
	category_list = Category.objects.order_by('-likes')[:5]
	return category_list

# BELOW ARE USEFUL VIEW FUNCTIONS

@login_required
def auto_add_page(request):
	context = RequestContext(request)
	context_dict = {}
	if request.method == 'GET':
		cat_name = request.GET['category_name']
		url = request.GET['url']
		title = request.GET['title']
		category = Category.objects.filter(name=cat_name)
		if len(category) == 1:
			p = Page.objects.get_or_create(category=category[0],title=title,url=url)
			pages = Page.objects.filter(category=category[0]).order_by('-views')
			context_dict['pages'] = pages
	return render_to_response('rango/page_list.html',context_dict,context)

@login_required
def like_category(request):
	likes = 0
	if request.method == 'GET':
		cat_id = int(request.GET['category_id'])
		categories = Category.objects.filter(id = cat_id)
		if len(categories) != 1:
			print "None/multiple such pages exist."
		else:
			categories[0].likes = categories[0].likes + 1
			categories[0].save()	
			likes = categories[0].likes
			# return redirect('/rango/Category/'+rango_extras.auto_code(categories[0].name)+'/')
	# context = RequestContext(request)
	# pictures = [["Ashish","/media/myself.jpg"],["Rango","/media/rango.jpg"]]
	# context_dict = {"aboutmessage":"You reached a bad URL.","pics":pictures,"count":count}
	# return render_to_response('rango/about.html',context_dict,context)	
	return HttpResponse(likes)

def track_url(request):
	if request.method == 'GET':
		if 'page_id' in request.GET:
			page_id = int(request.GET['page_id'])
			pages = Page.objects.filter(id = page_id)
			if len(pages) != 1:
				print "None/multiple such pages exist."
			else:
				pages[0].views = pages[0].views + 1
				pages[0].save()
				return redirect(pages[0].url)
	context = RequestContext(request)
	pictures = [["Ashish","/media/myself.jpg"],["Rango","/media/rango.jpg"]]
	context_dict = {"aboutmessage":"You reached a bad URL.","pics":pictures,"count":count}
	return render_to_response('rango/about.html',context_dict,context)
	
def search(request):
	context = RequestContext(request)
	result_list = []
	if request.method == 'POST':
		query = request.POST['query'].strip()
		if query:result_list = run_query(query)
	return render_to_response('rango/search.html',{'result_list':result_list},context)

def suggest_category(request):
	context = RequestContext(request)
	starts_with = ''
	context_dict = {}

	if request.method == 'GET':
		starts_with = request.GET['suggestion']
	print "ENTERED1"
	max_results = 10
	# cat_list = get_category_list(8,starts_with)
	if starts_with:
		cat_list = Category.objects.filter(name__istartswith=starts_with)
	else:
		cat_list = []	
	if len(cat_list) > max_results > 0:
		print "C1"
		cat_list = cat_list[:max_results]
	context_dict['cat_list'] = cat_list
	if starts_with == '*':
		print "C2"
		cat_list = get_category_list()
		context_dict['cat_list'] = cat_list
	if starts_with and not cat_list:
		print "C3"
		context_dict['error'] = True
	# print "DONE1"
	print "context_dict = ",context_dict
	print "starts_with = ",starts_with
	return render_to_response('rango/category_list.html',context_dict,context)

@login_required
def user_logout(request):
	logout(request)
	return HttpResponseRedirect('/rango/')

def user_login(request):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	message_sent = False	
	if request.method == 'POST':
		username = request.POST['username']
		password = request.POST['password']
		user = authenticate(username=username,password=password)
		if user:
			if user.is_active:
				login(request,user)
				return HttpResponseRedirect('/rango/')
			else:
				message = "Your Rango account is disabled."
				message_sent = True
		else:
			message = "Invalid login details. Your username or password is incorrect."
			message_sent = True
	if message_sent:
		return render_to_response('rango/login.html',{'message':message},context)
	return render_to_response('rango/login.html',{},context)

def register(request):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	registered = False
	if request.method == 'POST':
		user_form = UserForm(request.POST)
		profile_form = UserProfileForm(request.POST)
		if user_form.is_valid() and profile_form.is_valid():
			user = user_form.save()
			user.set_password(user.password)
			user.save()
			profile = profile_form.save(commit=False)
			profile.user = user
			
			if 'picture' in request.FILES:
				profile.picture = request.FILES['picture']
			profile.save()
			registered = True
		else:
			print user_form.errors,profile_form.errors
	else:
		user_form = UserForm()
		profile_form = UserProfileForm()
	return render_to_response('rango/register.html',{'user_form':user_form,'profile_form':profile_form,'registered':registered},context)

@login_required
def profile(request):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	return render_to_response('rango/profile.html',{},context)	

@login_required
def add_page(request,category_url):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	category_name = rango_extras.auto_code(category_url)	
	try:
		a = Category.objects.get(name=category_name)
	except Category.DoesNotExist:
		#form2 = CategoryForm(initial={'name':category_name})
		#return render_to_response('rango/add_category.html',{'form':form2},context)	
		return HttpResponseRedirect('/rango/add_category/%s/'%category_name)
	if request.method == 'POST':
		form = PageForm(request.POST)
		if form.is_valid():
			page = form.save(commit=False)
			try:
				a_category = Category.objects.get(name=category_name)
				page.category = a_category
			except Category.DoesNotExist:
				#form2 = CategoryForm(initial={'name':category_name})
				#return render_to_response('rango/add_category.html',{'form':form2},context)
				return HttpResponseRedirect('/rango/add_category/%s/'%category_name)			
			page.views = 0
			page.save()
			return category(request,category_url)
		else:
			print form.errors
	else:
		form = PageForm()
	return render_to_response('rango/add_page.html',{'category_url':category_url,'category_name':category_name,'form':form},context)

@login_required
def add_category2(request,category_name=''):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	#check if something is passed
	initial = {}
	if category_name != '':
		initial['name'] = category_name
	if request.method == 'POST':
		form = CategoryForm(request.POST)
		if form.is_valid():
			form.save(commit=True)
			return index(request)
		else:
			print form.errors
	else:
		form = CategoryForm(initial=initial)
	return render_to_response('rango/add_category.html',{'form':form},context)

@login_required
def add_category(request):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	if request.method == 'POST':
		form = CategoryForm(request.POST)
		if form.is_valid():
			form.save(commit=True)
			return index(request)
		else:
			print form.errors
	else:
		form = CategoryForm()
	return render_to_response('rango/add_category.html',{'form':form},context)


def category(request,category_url_name):
	# comment out when you don't want to use this
	count = count_work(request)
	cat_list = get_category_list()
	result_list = []
	if request.method == 'POST':
		query = request.POST['query'].strip()
		if query:result_list = run_query(query)

	context = RequestContext(request)
	category_name = rango_extras.auto_code(category_url_name)
	context_dict = {'category_name':category_name}
	try:
		category = Category.objects.get(name=category_name)
		category.views = category.views + 1
		category.save()
		pages = Page.objects.filter(category=category)
		context_dict['pages'] = pages
		context_dict['category'] = category
	except Category.DoesNotExist:
		pass
	# also comment this out
	# context_dict['cat_list'] = cat_list
	context_dict['result_list'] = result_list

	return render_to_response('rango/category.html',context_dict,context)

def index(request):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	category_list = Category.objects.order_by('-likes')[:5]
	page_list = Page.objects.order_by('-views')[:5]
	#for category in category_list:
		#category.url = category.name.replace(' ','_')
	#for page in page_list:
		#page.category_url = page.category.name.replace(' ','_')
	context_dict = {"categories":category_list,"pages":page_list}
	return render_to_response('rango/index.html',context_dict,context)
	
def about(request):
	# comment out when you don't want to use this
	count = count_work(request)

	context = RequestContext(request)
	pictures = [["Ashish","/media/myself.jpg"],["Rango","/media/rango.jpg"]]
	context_dict = {"aboutmessage":"This site is made with Django 1.6.1, with the help of TangoWithDjango.","pics":pictures,"count":count}
	return render_to_response('rango/about.html',context_dict,context)
